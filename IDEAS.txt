Capturing ideas
===============

How to make reusable libraries which use inline interpreted code? Looks like there can be "nested" grammars!
Looks like usage of Reference may need to be checked? There is no constraint that a found variable is what is expected (aka a constant instead of a variable).
Look at how bytecode is created - feels like Opcode and Directive can support Instruction more directly.
Track constants. Do they need to persist in library declarations or can they be thrown out?
Add EXIT (FOR/SUB/FUNCTION). Where to validate? Maybe in some visitor to be certain EXIT and RETURN in correct places.
Need to figure out how to handle processor status register in CPU interactions; ProDOS functions use C. Probably only want get. (Otherwise state probably will get carried between calls accidentally.)
Review generated code and look for alternates with new opcodes.
Add ELSEIF to IF statement.
Revisit the single line IF -- see what appears to be more standard (dislike Integer Basic variant).
Unit tests?
Interpreter for use in tests.
Structure assembly project; it's gonna get messier.
WHILE loop
REPEAT loop
DEF FN == Function
ProDOS commands (OPEN, READ, WRITE, CLOSE). Is this SUB and/or FUNCTION?
HGR
Constant arrays - can replace all those silly POKE statements with a loop and likely help with DATA statements.
Arrays - need heap. Where? $200? but that is input and ProDOS can use it. If they are hard-coded, then they can just go into code!
Function libraries (with inline?) - can a function return more than one value?
Optimization - strength reduction (MOD 16 can be AND #$0F, MUL x2 can be shift left)
Optimization - extract common code
