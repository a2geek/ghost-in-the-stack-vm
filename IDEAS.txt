Capturing ideas
===============

Secondary model should handle array pointer arithmetic? This could make code generation simpler.
Validate memory footprint for variable allocation in some manner
Looks like usage of Symbol may need to be checked? There is no constraint that a found variable is what is expected (aka a constant instead of a variable).
Look at how bytecode is created - feels like Opcode and Directive can support Instruction more directly.
Review generated code and look for alternates with new opcodes.
Unit tests?  Integer BASIC(done)  BASIC(done)  optimizations(done)  code generation?
Interpreter for use in tests.
Structure assembly project; it's gonna get messier.
Add Applesoft
DEF FN == Function
Optimization - extract common code
Basic needs actual string handling.
Bytes would be good to define buffers.
Need to determine if interpreter should keep signed and unsigned operations or can that just be replaced with wrapper code (removes DIVS/MULS/MODS)
Enhance USES statement to allow custom imports (example: USES MIN,MAX FROM "MATH")
Optimize/short circuit OR/AND with IFNZ/IFZ
Some expressions can be rearranged for better code, like 1 + n + 3 => 1 + 3 + n => 4 + n
Revisit boolean versus bit logic. NOT/AND/OR don't always work as expected; maybe new operators needed?
Inline idea - setup a visitor that takes the inlined function and writes it directly into the code; done BEFORE codegen. "RETURN" => assign.
Expression optimization where expression may be used more than once (like SELECT statement) and bounds check!
