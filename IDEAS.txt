Capturing ideas
===============

Look at how bytecode is created - feels like Opcode and Directive can support Instruction more directly.
Add EXIT (FOR/SUB/FUNCTION). Where to validate? Maybe in some visitor to be certain EXIT and RETURN in correct places.
Should CALL => NATIVE or NCALL to make it obvious?
How to make reusable libraries which use inline interpreted code? Looks like there can be "nested" grammars!
Once SUB and FUNCTION in place, most of the model can be reduced to CallSub and CallFunction to simplify the model.
Need to review negative number handling. Specifically MUL/DIV/MOD. Expect to require NEG operator to be implemented!
Review generated code and look for alternates with new opcodes.
Add ELSEIF to IF statement.
Revisit the single line IF -- see what appears to be more standard (dislike Integer Basic variant).
Unit tests?
CONST for named constants.
Interpreter for use in tests.
Structure assembly project; it's gonna get messier.
WHILE loop
REPEAT loop
DEF FN == Function
ProDOS commands (OPEN, READ, WRITE, CLOSE). Is this SUB and/or FUNCTION?
HGR
Constant arrays - can replace all those silly POKE statements with a loop and likely help with DATA statements.
Arrays - need heap. Where? $200? but that is input and ProDOS can use it. If they are hard-coded, then they can just go into code!
Function libraries (with inline?) - can a function return more than one value?
Optimization - strength reduction (MOD 16 can be AND #$0F, MUL x2 can be shift left)
Optimization - extract common code
