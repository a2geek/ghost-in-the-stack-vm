Capturing ideas
===============

Validate memory footprint for variable allocation in some manner
Looks like usage of Symbol may need to be checked? There is no constraint that a found variable is what is expected (aka a constant instead of a variable).
Look at how bytecode is created - feels like Opcode and Directive can support Instruction more directly.
Review generated code and look for alternates with new opcodes.
Unit tests?  Integer BASIC(done)  BASIC(done)  optimizations(done)  code generation?
Interpreter for use in tests.
Structure assembly project; it's gonna get messier.
Add Applesoft. DEF FN == Function
Decide on assembler syntax; extensible would be nice (embeddable even better - homebrew would be sufficient)
Basic needs actual string handling (likely tied to more typical calloc/free type memory allocation due to a lot of temp strings).
Need to determine if interpreter should keep signed and unsigned operations or can that just be replaced with wrapper code (removes DIVS/MULS/MODS)
Enhance USES statement to allow custom imports (example: USES MIN,MAX FROM "MATH")
Optimize/short circuit OR/AND with IFNZ/IFZ
Some expressions can be rearranged for better code, like 1 + n + 3 => 1 + 3 + n => 4 + n
Revisit boolean versus bit logic. NOT/AND/OR don't always work as expected; maybe new operators needed?
Time to split VM?  Split out GhostVM, reduce the instruction set. Primary VM becomes BasicVM?
