MAIN:
    DIM _ONERR_TARGET AS ADDRESS = null
    DIM _ONERR_FP AS ADDRESS = null
    DIM _ONERR_SP AS ADDRESS = null
    DIM TEMP AS ADDRESS = null
    DIM ADDR1 AS ADDRESS = null
    DIM ADDR2 AS ADDRESS = null
    DIM ADDR3 AS ADDRESS = null
   0:     *(105) = 32768
   1:     CALL MEMORY.HEAPINIT()
   2:     CALL PRODOS.ENSUREPREFIXSET()
   0:     IF PRODOS.HAS80COLS() THEN
   0:         CALL MISC.PRNUM(3)
          END IF
   1:     CALL RUNTIME.PRINT_STRING("HEAP ALLOCATION MEMORY TESTS")
   2:     CALL RUNTIME.PRINT_NEWLINE()
   3:     CALL RUNTIME.PRINT_STRING("============================")
   4:     CALL RUNTIME.PRINT_NEWLINE()
   5:     CALL RUNTIME.PRINT_NEWLINE()
   6:     CALL RUNTIME.PRINT_STRING("These tests run through different scenarios and make an")
   7:     CALL RUNTIME.PRINT_NEWLINE()
   8:     CALL RUNTIME.PRINT_STRING("attempt to confuse the heap allocation and free routines.")
   9:     CALL RUNTIME.PRINT_NEWLINE()
  10:     CALL RUNTIME.PRINT_NEWLINE()
  11:     ADDR1 = MEMORY.HEAPALLOC(100)
  12:     ADDR2 = MEMORY.HEAPALLOC(100)
  13:     CALL MEMORY.HEAPFREE(ADDR1)
  14:     CALL MEMORY.HEAPFREE(ADDR2)
  15:     ADDR3 = MEMORY.HEAPALLOC(200)
  16:     IF (ADDR3 <> 32772) THEN
   0:         CALL RUNTIME.PRINT_STRING("Test 1: Expecting $8004 but got ")
   1:         CALL RUNTIME.PRINT_ADDRESS(ADDR3)
   2:         CALL RUNTIME.PRINT_STRING(".")
   3:         CALL RUNTIME.PRINT_NEWLINE()
          ELSE
   0:         CALL RUNTIME.PRINT_STRING("Test 1: Passed.")
   1:         CALL RUNTIME.PRINT_NEWLINE()
          END IF
  17:     CALL MEMORY.HEAPINIT()
  18:     TEMP = MEMORY.HEAPALLOC(100)
  19:     ADDR1 = MEMORY.HEAPALLOC(200)
  20:     TEMP = MEMORY.HEAPALLOC(100)
  21:     CALL MEMORY.HEAPFREE(ADDR1)
  22:     ADDR2 = MEMORY.HEAPALLOC(50)
  23:     ADDR3 = MEMORY.HEAPALLOC(50)
  24:     IF ((ADDR2 <> 32876) or (ADDR3 <> 32930)) THEN
   0:         CALL RUNTIME.PRINT_STRING("Test 2: Expecting $806C/$80A2 but got ")
   1:         CALL RUNTIME.PRINT_ADDRESS(ADDR2)
   2:         CALL RUNTIME.PRINT_STRING(" and ")
   3:         CALL RUNTIME.PRINT_ADDRESS(ADDR3)
   4:         CALL RUNTIME.PRINT_STRING(".")
   5:         CALL RUNTIME.PRINT_NEWLINE()
          ELSE
   0:         CALL RUNTIME.PRINT_STRING("Test 2: Passed.")
   1:         CALL RUNTIME.PRINT_NEWLINE()
          END IF
  25:     CALL MEMORY.HEAPFREE(ADDR2)
  26:     CALL MEMORY.HEAPFREE(ADDR3)
  27:     ADDR1 = MEMORY.HEAPALLOC(200)
  28:     IF (ADDR1 <> 32876) THEN
   0:         CALL RUNTIME.PRINT_STRING("Test 3: Expecting $806C but got ")
   1:         CALL RUNTIME.PRINT_ADDRESS(ADDR1)
   2:         CALL RUNTIME.PRINT_STRING(".")
   3:         CALL RUNTIME.PRINT_NEWLINE()
          ELSE
   0:         CALL RUNTIME.PRINT_STRING("Test 3: Passed.")
   1:         CALL RUNTIME.PRINT_NEWLINE()
          END IF
  29:     CALL MEMORY.HEAPINIT()
  30:     TEMP = MEMORY.HEAPALLOC(100)
  31:     ADDR1 = MEMORY.HEAPALLOC(100)
  32:     CALL MEMORY.HEAPFREE(ADDR1)
  33:     ADDR2 = MEMORY.HEAPALLOC(100)
  34:     IF ((ADDR2 <> ADDR1) and (ADDR2 <> 32876)) THEN
   0:         CALL RUNTIME.PRINT_STRING("Test 4: Expecting $806C but got ")
   1:         CALL RUNTIME.PRINT_ADDRESS(ADDR2)
   2:         CALL RUNTIME.PRINT_STRING(".")
   3:         CALL RUNTIME.PRINT_NEWLINE()
          ELSE
   0:         CALL RUNTIME.PRINT_STRING("Test 4: Passed.")
   1:         CALL RUNTIME.PRINT_NEWLINE()
          END IF
  35:     END

